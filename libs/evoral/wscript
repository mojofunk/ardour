#!/usr/bin/env python
from waflib.extras import autowaf as autowaf
from waflib import Options
import os

# Version of this package (even if built as a child)
EVORAL_VERSION = '0.0.0'

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
# Version history:
#   0.0.0 = 0,0,0
EVORAL_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'evoral'
VERSION = EVORAL_VERSION

# Mandatory variables
top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_c')
    opt.load('compiler_cxx')
    autowaf.set_options(opt)
    opt.add_option('--test', action='store_true', default=False, dest='build_tests',
                    help="Build unit tests")
    opt.add_option('--test-coverage', action='store_true', default=False, dest='test_coverage',
                    help="Use gcov to test for code coverage")

def configure(conf):
    conf.load('compiler_c')
    conf.load('compiler_cxx')
    autowaf.configure(conf)
    #autowaf.display_header('Evoral Configuration')

    autowaf.check_pkg(conf, 'glib-2.0', uselib_store='GLIB', atleast_version='2.2')
    autowaf.check_pkg(conf, 'glibmm-2.4', uselib_store='GLIBMM', atleast_version='2.14.0')
    autowaf.check_pkg(conf, 'gthread-2.0', uselib_store='GTHREAD', atleast_version='2.14.0')
    if not autowaf.is_child():
        autowaf.check_pkg(conf, 'libpbd-4', uselib_store='PBD', atleast_version='4.0.0', mandatory=True)

    conf.env['BUILD_TESTS'] = Options.options.build_tests
    conf.env['TEST_COVERAGE'] = Options.options.test_coverage

    if Options.options.build_tests:
        autowaf.check_pkg(conf, 'cppunit', uselib_store='CPPUNIT', atleast_version='1.12.0')

    #autowaf.display_msg(conf, "Unit tests", str(conf.env['BUILD_TESTS']))
    #print

def build(bld):
    # Headers
    #bld.install_files('${INCLUDEDIR}/evoral', 'evoral/*.h')
    #bld.install_files('${INCLUDEDIR}/evoral', 'evoral/*.hpp')

    # Pkgconfig file
    #autowaf.build_pc(bld, 'EVORAL', EVORAL_VERSION, 'GLIBMM GTHREAD')

    libsmf = bld(features = 'c cstlib')
    libsmf.source = '''
            src/libsmf/smf.c
            src/libsmf/smf_decode.c
            src/libsmf/smf_load.c
            src/libsmf/smf_save.c
            src/libsmf/smf_tempo.c
    '''
    libsmf.export_includes = ['./src/libsmf']
    libsmf.defines      = ['SMF_VERSION="1.2"', 'LIBSMF_DLL_EXPORTS']
    libsmf.includes     = ['./src']
    libsmf.name         = 'SMF'
    libsmf.target       = 'smf'
    libsmf.uselib       = 'GLIB'
    libsmf.install_path = None
    if bld.env['build_target'] != 'mingw':
        libsmf.cxxflags     = [ '-fPIC' ]
        libsmf.cflags       = [ '-fPIC' ]

    lib_source = '''
            src/Control.cpp
            src/ControlList.cpp
            src/ControlSet.cpp
            src/Curve.cpp
            src/Event.cpp
            src/Note.cpp
            src/SMF.cpp
            src/Sequence.cpp
            src/TimeConverter.cpp
            src/debug.cpp
    '''

    lib_amalgamated_source = 'evoral.cpp'

    sources = lib_source

    if bld.env['AMALGAMATE']:
        sources = lib_amalgamated_source

    # Library
    obj              = bld.shlib(features = 'c cxx cshlib cxxshlib', source=sources)
    # DLL exports for this library
    obj.defines      = [ 'LIBEVORAL_DLL_EXPORTS' ]

    obj.export_includes = ['.']
    obj.includes       = ['.', './src']
    obj.name           = 'EVORAL'
    obj.target         = 'evoral'
    obj.use            = 'SMF PBD TEMPORAL'
    obj.vnum           = EVORAL_LIB_VERSION
    obj.install_path   = bld.env['LIBDIR']
    obj.defines       += [ 'PACKAGE="libevoral"' ]

    if bld.env['BUILD_TESTS'] and bld.is_defined('HAVE_CPPUNIT'):
        # Static library (for unit test code coverage)
        obj = bld(features = 'cxx cstlib')
        obj.source         = lib_source
        obj.export_includes = ['.']
        obj.includes       = ['.', './src']
        obj.name           = 'EVORAL_STATIC'
        obj.target         = 'evoral_static'
        obj.use            = 'SMF PBD TEMPORAL'
        obj.vnum           = EVORAL_LIB_VERSION
        obj.install_path   = ''
        if bld.env['TEST_COVERAGE']:
            obj.linkflags      = ['--coverage']
            obj.cflags         = ['--coverage']
            obj.cxxflags       = ['--coverage']
        obj.defines        = ['PACKAGE="libevoral"']

        broken_tests = '''
                test/SequenceTest.cpp
                test/SMFTest.cpp
                test/NoteTest.cpp
                '''

        # Unit tests
        obj              = bld(features = 'cxx cxxprogram')
        obj.source       = '''
                test/RangeTest.cpp
                test/CurveTest.cpp
                test/testrunner.cpp
        '''
        obj.use          = 'EVORAL_STATIC'
        obj.uselib       = 'CPPUNIT'
        obj.target       = 'run-tests'
        obj.install_path = ''
        obj.defines      = ['PACKAGE="libevoraltest"']
        if bld.env['TEST_COVERAGE']:
            obj.linkflags      = ['--coverage']
            obj.cflags         = ['--coverage']
            obj.cxxflags       = ['--coverage']

def test(ctx):
    autowaf.pre_test(ctx, APPNAME)
    print(os.getcwd())
    os.environ['EVORAL_TEST_PATH'] = os.path.abspath('../test/testdata/')
    autowaf.run_tests(ctx, APPNAME, ['./run-tests'])
    autowaf.post_test(ctx, APPNAME)
