#!/usr/bin/env python
from waflib.extras import autowaf as autowaf
from waflib import Options
from waflib import TaskGen
import os

# Version of this package (even if built as a child)
MAJOR = '0'
MINOR = '0'
MICRO = '0'
WIDGETS_VERSION = "%s.%s.%s" % (MAJOR, MINOR, MICRO)

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
WIDGETS_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'widgets'
VERSION = WIDGETS_VERSION
I18N_PACKAGE = 'libwidgets'

# Mandatory variables
top = '.'
out = 'build'

widgets_sources = [
        'ardour_button.cc',
        'ardour_display.cc',
        'ardour_dropdown.cc',
        'ardour_fader.cc',
        'ardour_icon.cc',
        'ardour_knob.cc',
        'ardour_spacer.cc',
        'ardour_spinner.cc',
        'barcontroller.cc',
        'binding_proxy.cc',
        'eventboxext.cc',
        'choice.cc',
        'fastmeter.cc',
        'focus_entry.cc',
        'pane.cc',
        'paths_dialog.cc',
        'popup.cc',
        'prompter.cc',
        'scroomer.cc',
        'searchbar.cc',
        'slider_controller.cc',
        'stateful_button.cc',
        'tabbable.cc',
        'tearoff.cc',
        'tooltips.cc',
        'ui_config.cc',
]

widgets_amalgamated_sources = [
        'libwidgets.cc',
]

def options(opt):
    autowaf.set_options(opt)

def configure(conf):
    conf.load ('compiler_cxx')
    autowaf.configure(conf)

def build(bld):
    sources = list(widgets_sources)
    if bld.env['AMALGAMATE']:
        sources = list(widgets_amalgamated_sources)
    # Library
    obj = bld.shlib(features = 'cxx cxxshlib', source=sources)
    obj.defines      = [ 'LIBWIDGETS_DLL_EXPORTS=1' ]

    obj.export_includes = ['.']
    obj.includes     = obj.export_includes
    obj.use          = [ 'PBD', 'GTKMM2EXT' ]
    obj.name         = 'WIDGETS'
    obj.target       = 'widgets'
    obj.vnum         = WIDGETS_LIB_VERSION
    obj.install_path = bld.env['LIBDIR']
    obj.defines      += [ 'PACKAGE="' + I18N_PACKAGE + '"' ]

def shutdown():
    autowaf.shutdown()

